aspect JastAddContentOutline {
  eq SynEq.showInContentOutline() = true;
  eq InhEq.showInContentOutline() = true;
  eq ContributionDecl.showInContentOutline() = true;
  
  eq IntertypeMethodDecl.contentOutlineLabel() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + introducedType().name() + "." + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
   eq SynEq.contentOutlineLabel() {
     StringBuffer res = new StringBuffer();
     res.append("eq " + introducedType().name() + "." + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
   
   eq InhEq.contentOutlineLabel() {
     StringBuffer res = new StringBuffer();
     res.append("eq " + introducedType().name() + "." + getChildName() + "(");
     for (int i = 0; i < getNumChildParameter(); i++) {
       res.append(getChildParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")." + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }

   eq ContributionDecl.contentOutlineLabel() {
     StringBuffer res = new StringBuffer();
     res.append("contribution to " + getCollType().type().typeName() + "." + getID());
     return res.toString();
   }

	
	eq ASTDecl.showInContentOutline() = true;
	eq ASTDecl.contentOutlineLabel() = getID();
	
	eq ASTChild.showInContentOutline() = true;
	eq ASTChild.contentOutlineLabel() {
		StringBuffer res = new StringBuffer();
		res.append(getName());
		if (hasType()) {
			res.append(":" + getType());
		}
		return res.toString();
	}
	eq ASTListChild.contentOutlineLabel() = super.contentOutlineLabel() + "*";
	eq ASTOptionalChild.contentOutlineLabel() = "[" + super.contentOutlineLabel() + "]";
	eq ASTTokenChild.contentOutlineLabel() = "<" + super.contentOutlineLabel() + ">";
	
	/*
  	refine JastAddJContentOutline eq CompilationUnit.outlineChildren() {
  		if (isFromASTFile()) {
  			ArrayList list = collectRelatedASTDecls(relativeName());
  			//System.out.println("ASTDecl List: " + list);
  			return list;
  		} else {
  			return JastAddJContentOutline.CompilationUnit.outlineChildren();
  		}
  	}
  	*/
  		  
}
