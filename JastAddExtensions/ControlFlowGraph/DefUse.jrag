aspect DefUse {	
/*	
	eq EntryStmt.def() {
		BodyDecl b = enclosingBodyDecl();
		if(b instanceof MethodDecl) {
			BitSet set = empty();			
			for(int i=0;i<((MethodDecl)b).getNumParameter();i++) 
				set = set.union(((MethodDecl)b).getParameter(i));
			
			
			for(Iterator it = set.iterator();it.hasNext();)
				System.err.println(it.next());
			
			return set;  	
		}
		else if(b instanceof ConstructorDecl) {
			BitSet set = empty();			
			for(int i=0;i<((ConstructorDecl)b).getNumParameter();i++) 
				set = set.union(((ConstructorDecl)b).getParameter(i));	
			return set;
		}
		else
			return empty();
	}
*/
	

	// create a locally scoped empty bit set for each body decl
	syn lazy BitSet BodyDecl.empty() = new BitSet();
	eq BodyDecl.getChild().empty() = empty();
	
	eq Program.getChild().empty() {
		throw new UnsupportedOperationException(); 
	}

		
	// make scoped bit set visible from statements and expressions
	inh BitSet Stmt.empty();
	inh BitSet Expr.empty();

	// EN: Adding empty for remaining types implementing the CFNode interface
	inh BitSet ParameterDeclaration.empty();
	inh BitSet Modifiers.empty();
	inh BitSet TypeDecl.empty();
	
	

  // Let each Stmt collect defs from descending LocalVarAccess nodes
//  coll BitSet Stmt.def() [empty().mutable()] with add root Stmt;
  coll BitSet CFNode.def() [empty().mutable()] with add root Program; // had to switch the root to Program instead of Stmt
  VarAccess contributes decl() when isDest() && decl().isLocalVariable() to Stmt.def() for enclosingStmt(); 
  VariableDeclaration contributes this when hasInit() to Stmt.def() for this;

  // Let each Stmt collect uses from descending LocalVarAccess nodes
//  coll BitSet Stmt.use() [empty().mutable()] with add root Stmt;
  coll BitSet CFNode.use() [empty().mutable()] with add root Program; // had to switch the root to Program instead of Stmt
  VarAccess contributes decl() when /*isSource() &&*/ decl().isLocalVariable() to Stmt.use() for enclosingStmt();


/*  	
  	// My implementation
  	// def()
  	syn BitSet CFNode.def();
  	eq Expr.def() = empty();
  	eq Stmt.def() = empty();

	// EN: Need equations for all node types implementing the CFNode interface
	eq ParameterDeclaration.def() = empty();
	eq Modifiers.def() = empty();
	eq TypeDecl.def() = empty();

	eq VarAccess.def() {
  		if(isDest() && (decl().isLocalVariable() || 
  			decl().isMethodParameter()))
  			return empty().union(decl());
  	//	if(isDest() && decl().isLocalVariable())  	  			
	//	  		return empty().union(decl());
  		else
  			//return super.def();
  			return empty();
  	}
  
  	eq VariableDeclaration.def() {
  		if(hasInit()) 
  			return empty().union(this);
  		else
  			//return super.def();
  			return empty();
  	}
  
  
  	// use()
  	syn BitSet CFNode.use();
  	eq Expr.use() = empty();
  	eq Stmt.use() = empty();

	// EN: Need equations for all node types implementing the CFNode interface
	eq ParameterDeclaration.use() = empty();
	eq Modifiers.use() = empty();
	eq TypeDecl.use() = empty();
  	
  	eq VarAccess.use() {
  		if(isSource() && (decl().isLocalVariable() ||
  			decl().isMethodParameter()))
  			return empty().union(decl());	
  	//	if(isSource() && decl().isLocalVariable()) 	  			
  	//  		return empty().union(decl());
  		else
  			return super.use();
  	}

 */
  
}
