// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   A.ast

package m1;

import jastadd$framework.ASTNode;
import m2.BType;
import m3.CType;
import m4.DType;
import m5.EType;
import m6.FType;

public class AType extends ASTNode
{

    public BType getBType()
    {
        return (BType)getChild(0);
    }

    public BType getBTypeNoTransform()
    {
        return (BType)getChildNoTransform(0);
    }

    public void setBType(BType node)
    {
        setChild(node, 0);
    }

    public CType getCType()
    {
        return (CType)getChild(1);
    }

    public CType getCTypeNoTransform()
    {
        return (CType)getChildNoTransform(1);
    }

    public void setCType(CType node)
    {
        setChild(node, 1);
    }

    public DType getDType()
    {
        return (DType)getChild(2);
    }

    public DType getDTypeNoTransform()
    {
        return (DType)getChildNoTransform(2);
    }

    public void setDType(DType node)
    {
        setChild(node, 2);
    }

    public EType getEType()
    {
        return (EType)getChild(3);
    }

    public EType getETypeNoTransform()
    {
        return (EType)getChildNoTransform(3);
    }

    public void setEType(EType node)
    {
        setChild(node, 3);
    }

    public FType getFType()
    {
        return (FType)getChild(4);
    }

    public FType getFTypeNoTransform()
    {
        return (FType)getChildNoTransform(4);
    }

    public void setFType(FType node)
    {
        setChild(node, 4);
    }

    public AType(BType p0, CType p1, DType p2, EType p3, FType p4)
    {
        is$Final = true;
        setChild(p0, 0);
        setChild(p1, 1);
        setChild(p2, 2);
        setChild(p3, 3);
        setChild(p4, 4);
    }

    public AType()
    {
        is$Final = true;
    }

    protected void init$children()
    {
        children = new ASTNode[5];
    }

    public ASTNode rewriteTo()
    {
        return super.rewriteTo();
    }

    public Object clone()
        throws CloneNotSupportedException
    {
        AType node = (AType)super.clone();
        node.inCircle = false;
        node.is$Final = false;
        return node;
    }

    public int getNumChild()
    {
        return 5;
    }

    public boolean mayHaveRewrite()
    {
        return false;
    }
}
