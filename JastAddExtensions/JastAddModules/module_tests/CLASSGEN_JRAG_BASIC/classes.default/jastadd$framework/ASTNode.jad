// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ../testlib/ASTNode.java

package jastadd$framework;

import beaver.Symbol;
import java.io.PrintStream;
import java.util.*;
import m1.X;

// Referenced classes of package jastadd$framework:
//            List

public class ASTNode extends Symbol
    implements Cloneable
{
    public static class CircularEvalEntry
    {

        public boolean equals(Object rhs)
        {
            CircularEvalEntry s = (CircularEvalEntry)rhs;
            if(parameters == null && s.parameters == null)
                return node == s.node && attrName.equals(s.attrName);
            if(parameters != null && s.parameters != null)
                return node == s.node && attrName.equals(s.attrName) && parameters.equals(s.parameters);
            else
                return false;
        }

        public int hashCode()
        {
            return node.hashCode();
        }

        ASTNode node;
        String attrName;
        Object parameters;

        public CircularEvalEntry(ASTNode node, String attrName, Object parameters)
        {
            this.node = node;
            this.attrName = attrName;
            this.parameters = parameters;
        }
    }

    public static class CircularStackEntry
    {

        Set circularEvalSet;
        boolean changeValue;

        public CircularStackEntry(Set set, boolean change)
        {
            circularEvalSet = set;
            changeValue = change;
        }
    }

    public static class State
    {

        private final void ensureSize(int size)
        {
            if(size < stack.length)
            {
                return;
            } else
            {
                int newStack[] = new int[stack.length * 2];
                System.arraycopy(stack, 0, newStack, 0, stack.length);
                stack = newStack;
                return;
            }
        }

        public void push(int i)
        {
            ensureSize(pos + 1);
            stack[pos++] = i;
        }

        public int pop()
        {
            return stack[--pos];
        }

        public int peek()
        {
            return stack[pos - 1];
        }

        private int stack[];
        private int pos;

        public State()
        {
            stack = new int[64];
            pos = 0;
        }
    }


    public ASTNode()
    {
        inCircle = false;
        is$Final = false;
        init$children();
    }

    protected void init$children()
    {
    }

    public void addEvalEntry(ASTNode node, String attrName, Object parameters)
    {
        circularEvalSet.add(new CircularEvalEntry(node, attrName, parameters));
    }

    public boolean containsEvalEntry(ASTNode node, String attrName, Object parameters)
    {
        return circularEvalSet.contains(new CircularEvalEntry(node, attrName, parameters));
    }

    public void pushEvalStack()
    {
        Object _tmp = (Object)circularEvalStack.push(new CircularStackEntry(circularEvalSet, CHANGE));
        circularEvalSet = new HashSet();
        CHANGE = false;
    }

    public void popEvalStack()
    {
        CircularStackEntry c = (CircularStackEntry)(Object)circularEvalStack.pop();
        circularEvalSet = c.circularEvalSet;
        CHANGE = c.changeValue;
    }

    public ASTNode getChild(int i)
    {
        return getChild(this, i);
    }

    public static ASTNode getChild(ASTNode that, int i)
    {
        ASTNode node = that.getChildNoTransform(i);
        if(node.is$Final)
            return node;
        if(!node.mayHaveRewrite())
        {
            node.is$Final = that.is$Final;
            return node;
        }
        if(!node.inCircle)
        {
            int num = boundariesCrossed;
            int j;
            do
            {
                state.push(1);
                ASTNode oldNode = node;
                oldNode.inCircle = true;
                node = node.rewriteTo();
                oldNode.inCircle = false;
                that.setChild(node, i);
                j = state.pop();
            } while(j == 1);
            if(j == 2 && that.is$Final)
            {
                node.is$Final = true;
                boundariesCrossed = num;
            }
        } else
        if(that.is$Final != node.is$Final)
            boundariesCrossed++;
        return node;
    }

    public int getIndexOfChild(ASTNode node)
    {
        if(node.childIndex < getNumChild() && node == getChildNoTransform(node.childIndex))
            return node.childIndex;
        for(int i = 0; i < getNumChild(); i++)
            if(getChildNoTransform(i) == node)
            {
                node.childIndex = i;
                return i;
            }

        return -1;
    }

    public void addChild(ASTNode node)
    {
        setChild(node, getNumChild());
    }

    public ASTNode getChildNoTransform(int i)
    {
        return children[i];
    }

    public int getNumChild()
    {
        return numChildren;
    }

    public void setChild(ASTNode node, int i)
    {
        if(children == null)
            children = new ASTNode[i + 1];
        else
        if(i >= children.length)
        {
            ASTNode c[] = new ASTNode[i << 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = node;
        if(i >= numChildren)
            numChildren = i + 1;
        if(node != null)
        {
            node.setParent(this);
            node.childIndex = i;
        }
    }

    public void insertChild(ASTNode node, int i)
    {
        if(i > numChildren)
            throw new Error("insertChild error: can not insert child at position outside list of elements");
        if(children == null)
        {
            children = new ASTNode[i + 1];
            children[i] = node;
        } else
        {
            ASTNode c[] = new ASTNode[children.length + 1];
            System.arraycopy(children, 0, c, 0, i);
            c[i] = node;
            if(i < children.length)
                System.arraycopy(children, i, c, i + 1, children.length - i);
            children = c;
        }
        numChildren++;
        if(node != null)
        {
            node.setParent(this);
            node.childIndex = i;
        }
    }

    public ASTNode insertList(List newList, int i)
    {
        setChild(newList.getChildNoTransform(0), i);
        for(int j = 1; j < newList.getNumChild(); j++)
            insertChild(newList.getChildNoTransform(j), ++i);

        return newList.getChildNoTransform(0);
    }

    public ASTNode getParent()
    {
        if(parent != null && parent.is$Final != is$Final)
            boundariesCrossed++;
        return parent;
    }

    public void setParent(ASTNode node)
    {
        parent = node;
    }

    public ASTNode rewriteTo()
    {
        if(state.peek() == 1)
        {
            state.pop();
            state.push(2);
        }
        return this;
    }

    public boolean mayHaveRewrite()
    {
        return false;
    }

    public ASTNode copy()
    {
        try
        {
            ASTNode node = (ASTNode)clone();
            if(children != null)
                node.children = (ASTNode[])children.clone();
            return node;
        }
        catch(CloneNotSupportedException clonenotsupportedexception)
        {
            System.err.println("Error: Could not clone node of type " + getClass().getName() + "!");
        }
        return null;
    }

    public ASTNode fullCopy()
    {
        ASTNode res = copy();
        for(int i = 0; i < getNumChild(); i++)
        {
            ASTNode node = getChildNoTransform(i);
            if(node != null)
                node = node.fullCopy();
            res.setChild(node, i);
        }

        return res;
    }

    public static boolean duringm1_X()
    {
        return X.impl$body$duringm1_X();
    }

    public void g()
    {
        X.impl$body$g(this);
    }

    public static State get$state$access$0()
    {
        return state;
    }

    public static int get$REWRITE_INTERRUPT$access$1()
    {
        return 3;
    }

    public static boolean IN_CIRCLE = false;
    public static boolean CHANGE = false;
    public static boolean LAST_CYCLE = false;
    public static Set circularEvalSet = new HashSet();
    public static Stack circularEvalStack = new Stack();
    public static int boundariesCrossed = 0;
    protected static State state = new State();
    public boolean inCircle;
    public boolean is$Final;
    protected static final int REWRITE_CHANGE = 1;
    protected static final int REWRITE_NOCHANGE = 2;
    protected static final int REWRITE_INTERRUPT = 3;
    private int childIndex;
    protected ASTNode parent;
    protected ASTNode children[];
    protected int numChildren;
    public static int duringm1_X = 0;

}
