// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   C.ast

package m1.m3;

import jastadd$framework.ASTNode;
import java.util.*;

// Referenced classes of package m1.m3:
//            CAspect

public class CType extends ASTNode
{

    public CType()
    {
        functionC_m1$m3$CType$value = new HashMap(4);
        functionC_m1$m3$CType$visited = new HashSet(4);
        functionA$visited = false;
    }

    protected void init$children()
    {
        children = new ASTNode[0];
    }

    public Object clone()
        throws CloneNotSupportedException
    {
        CType node = (CType)super.clone();
        functionC_m1$m3$CType$value = new HashMap(4);
        node.inCircle = false;
        node.is$Final = false;
        return node;
    }

    public String functionC(CType ctype)
    {
        CType ctype1 = ctype;
        if(functionC_m1$m3$CType$value.containsKey(ctype1))
            return (String)(Object)functionC_m1$m3$CType$value.get(ctype1);
        boolean flag = false;
        if(functionC_m1$m3$CType$visited.contains(ctype1))
            throw new RuntimeException("Circular definition of attr: functionC(m1.m3.CType) in class: m1.m3.CType");
        functionC_m1$m3$CType$visited.add(ctype1);
        if(IN_CIRCLE)
        {
            flag = true;
            IN_CIRCLE = false;
            pushEvalStack();
        }
        int i = boundariesCrossed;
        boolean flag1 = is$Final;
        String s = CAspect.impl$body$functionC(this, ctype);
        if(flag1 && i == boundariesCrossed)
        {
            Object _tmp = (Object)functionC_m1$m3$CType$value.put(ctype1, s);
        }
        functionC_m1$m3$CType$visited.remove(ctype1);
        if(flag)
        {
            IN_CIRCLE = true;
            popEvalStack();
        }
        return s;
    }

    public String functionA()
    {
        boolean flag = false;
        if(functionA$visited)
            throw new RuntimeException("Circular definition of attr: functionA() in class: m1.m3.CType");
        functionA$visited = true;
        if(IN_CIRCLE)
        {
            flag = true;
            IN_CIRCLE = false;
            pushEvalStack();
        }
        ASTNode astnode = getParent();
        Object obj = this;
        Object obj1 = null;
        for(; !(astnode instanceof jastadd$framework.ASTNode.Defines.functionA); astnode = astnode.getParent())
        {
            obj1 = obj;
            obj = astnode;
        }

        String s = ((jastadd$framework.ASTNode.Defines.functionA)astnode).Defines$functionA(((ASTNode) (obj)), ((ASTNode) (obj1)));
        functionA$visited = false;
        if(flag)
        {
            IN_CIRCLE = true;
            popEvalStack();
        }
        return s;
    }

    public ASTNode rewriteTo()
    {
        return super.rewriteTo();
    }

    public int getNumChild()
    {
        return 0;
    }

    public boolean mayHaveRewrite()
    {
        return false;
    }

    private Map functionC_m1$m3$CType$value;
    private HashSet functionC_m1$m3$CType$visited;
    private boolean functionA$visited;
}
